import matplotlib.pyplot as plt
import pandas as pd
import geopandas
import numpy as np
import os
from PIL import Image, ImageDraw
import re


zimFile = "/Users/robbiework/PycharmProjects/spacialEpidemiologyAnalysis/data/new_districts/ZWE_adm2.shp"
zimbabwe = geopandas.read_file(zimFile)
file_path = "/Users/robbiework/eclipse-workspace/Disease-Modelling-SSA/java/WorldBankCovid19/"
base_path = "/Users/robbiework/PycharmProjects/spacialEpidemiologyAnalysis/plots_from_0.03/"


def plot_all_graphs(filepath, base_path, country, outputfilename):
    """a function that will extract information from a group of simulations"""
    # create directories to neatly store the model output
    if not os.path.exists(base_path):
        os.mkdir(base_path)
    pathname = base_path + "autoGeneratedPlots/"
    if not os.path.exists(pathname):
        os.mkdir(pathname)
    if not os.path.exists(pathname + "spatial_epidemiology/"):
        os.mkdir(pathname + "spatial_epidemiology/")
    if not os.path.exists(pathname + "population_level_epidemiology/"):
        os.mkdir(pathname + "population_level_epidemiology/")
    if not os.path.exists(pathname + "demography/"):
        os.mkdir(pathname + "demography/")

    # Store gif plots in one place
    if not os.path.exists(pathname + "gifs/"):
        os.mkdir(pathname + "gifs/")
    if not os.path.exists(pathname + "gifs/cases_by_type_over_time/"):
        os.mkdir(pathname + "gifs/cases_by_type_over_time/")
    if not os.path.exists(pathname + "gifs/perc_inf/"):
        os.mkdir(pathname + "gifs/perc_inf/")
    if not os.path.exists(pathname + "gifs/n_cases/"):
        os.mkdir(pathname + "gifs/n_cases/")
    if not os.path.exists(pathname + "gifs/n_perc_comp/"):
        os.mkdir(pathname + "gifs/n_perc_comp/")

    demography_save_path = pathname + "demography/"
    spatial_epidemiology_save_path = pathname + "spatial_epidemiology/"
    pop_level_epidemiology_save_path = pathname + "population_level_epidemiology/"
    gif_path = pathname + "gifs/"
    # sort the files into their respective parts
    original_cases_files = []
    new_cases_files = []
    birth_rate_files = []
    district_level_pop_size_files = []
    incidence_of_covid_files = []
    incidence_of_covid_death_files = []
    incidence_of_other_death_files = []
    overall_demographics_files = []
    percent_with_covid_files = []
    covid_demographic_files = []
    for file in os.listdir(filepath):
        if file.startswith(outputfilename):
            if 'Cases_Per_District' in file.title():
                new_cases_files.append(file)
            elif 'Birth_Rate' in file.title():
                birth_rate_files.append(file)
            elif 'District_Level_Population_Size' in file.title():
                district_level_pop_size_files.append(file)
            elif ('Incidence_Of_Covid_' in file.title()) and ('Death' not in file.title()):
                incidence_of_covid_files.append(file)
            elif 'Incidence_Of_Covid_Death' in file.title():
                incidence_of_covid_death_files.append(file)
            elif 'Incidence_Of_Other_Death' in file.title():
                incidence_of_other_death_files.append(file)
            elif 'Overall_Demographics' in file.title():
                overall_demographics_files.append(file)
            elif 'Percent_In_District_With_Covid' in file.title():
                percent_with_covid_files.append(file)
            elif 'Age_Gender_Demographics_Covid' in file.title():
                covid_demographic_files.append(file)
            else:
                original_cases_files.append(file)


    district_level_pop = pd.DataFrame()
    for file in district_level_pop_size_files:
        data = pd.read_csv(filepath + file, delimiter='\t')
        data = data.drop('Unnamed: 61', axis=1)
        district_level_pop = district_level_pop.append(data)
    district_level_pop = district_level_pop.groupby('day').mean()
    # Get information on the population size used in the run to extrapolate results to full population size
    model_pop_size = district_level_pop.iloc[0].sum()
    full_pop_size = 15024480
    scale_to_full_pop = full_pop_size / model_pop_size
    district_level_pop *= scale_to_full_pop
    ax1 = plt.subplot(1, 1, 1)

    spatialDf = country
    spatialDf['pop_size'] = district_level_pop.mean().values
    spatialDf.plot(ax=ax1, column='pop_size', cmap='Purples', edgecolor='k', legend=True,
                   vmax=max(district_level_pop.mean().values))
    plt.title("Average population size per district")
    plt.savefig(demography_save_path + "pop_size_per_district.png", dpi=400)
    plt.clf()
    district_level_pop['total'] = district_level_pop.sum(axis=1)
    plt.plot(district_level_pop.index, district_level_pop.total)
    plt.xlabel('Time')
    plt.ylabel('Population')
    plt.title('Total population over time')
    plt.savefig(demography_save_path + "population_size_overall.png", dpi=400)
    plt.clf()
    # overall_demographics_files

    birthrate = pd.DataFrame()
    for file in birth_rate_files:
        data = pd.read_csv(filepath + file, delimiter='\t')
        data['day'] = data.index
        birthrate = birthrate.append(data)
    age_boundaries = ['15-19', '20-24', '25-29', '30-34', '35-39', '40-44', '45-49']
    three_year_br = [108, 193, 175, 149, 104, 40, 2]

    birthrate = birthrate.groupby('day').mean()
    birthrate = birthrate.astype(float)
    total_birth_rate_in_run = list(birthrate.sum())
    days_in_run = len(birthrate)
    av_birth_rate_per_day = list(np.divide(total_birth_rate_in_run, days_in_run))
    scale_birth_rate_to_three_years = np.multiply(av_birth_rate_per_day, 365 * 3)
    plt.bar(np.arange(len(three_year_br)), three_year_br, color='lightsteelblue', label='data', width=0.4)
    plt.bar(np.arange(len(scale_birth_rate_to_three_years)) + 0.4, scale_birth_rate_to_three_years,
            color='lightsalmon', label='model', width=0.4)
    plt.xticks(np.arange(len(age_boundaries)), age_boundaries)
    plt.legend()
    plt.ylabel('3 year birth rate')
    plt.savefig(demography_save_path + "birthrate.png", dpi=400)
    plt.clf()
    female_covid_counts = pd.DataFrame()
    female_covid_death_counts = pd.DataFrame()
    male_covid_counts = pd.DataFrame()
    male_covid_death_counts = pd.DataFrame()
    overall_covid_counts = pd.DataFrame()
    overall_covid_death_counts = pd.DataFrame()
    for file in covid_demographic_files:
        data = pd.read_csv(filepath + file, delimiter='\t')
        cases = data.loc[data['metric'] == 'cases']
        m_cases = cases.loc[cases['sex'] == 'm']
        m_cases = m_cases.drop('sex', axis=1)
        m_cases = m_cases.drop('metric', axis=1)
        f_cases = cases.loc[cases['sex'] == 'f']
        f_cases = f_cases.drop('sex', axis=1)
        f_cases = f_cases.drop('metric', axis=1)
        deaths = data.loc[data['metric'] == 'deaths']
        m_deaths = deaths.loc[deaths['sex'] == 'm']
        m_deaths = m_deaths.drop('sex', axis=1)
        m_deaths = m_deaths.drop('metric', axis=1)
        f_deaths = deaths.loc[deaths['sex'] == 'f']
        f_deaths = f_deaths.drop('sex', axis=1)
        f_deaths = f_deaths.drop('metric', axis=1)
        total_cases = cases.drop('sex', axis=1)
        total_cases = total_cases.drop('metric', axis=1)
        total_cases = total_cases.astype(float)
        total_cases = total_cases.groupby('day').sum()
        total_deaths = deaths.drop('sex', axis=1)
        total_deaths = total_deaths.drop('metric', axis=1)
        total_deaths = total_deaths.astype(float)
        total_deaths = total_deaths.groupby('day').sum()
        female_covid_counts = female_covid_counts.append(f_cases)
        male_covid_counts = male_covid_counts.append(m_cases)
        female_covid_death_counts = female_covid_death_counts.append(f_deaths)
        male_covid_death_counts = male_covid_death_counts.append(m_deaths)
        overall_covid_counts = overall_covid_counts.append(total_cases)
        overall_covid_death_counts = overall_covid_death_counts.append(total_deaths)

    female_covid_counts = female_covid_counts.groupby('day').mean()
    female_covid_death_counts *= scale_to_full_pop
    male_covid_counts = male_covid_counts.groupby('day').mean()
    male_covid_counts *= scale_to_full_pop
    female_covid_death_counts = female_covid_death_counts.groupby('day').mean()
    female_covid_death_counts *= scale_to_full_pop
    male_covid_death_counts = male_covid_death_counts.groupby('day').mean()
    male_covid_death_counts *= scale_to_full_pop
    m_cfr_by_age = list(np.divide(male_covid_death_counts.sum().values, male_covid_counts.sum().values))
    f_cfr_by_age = list(np.divide(female_covid_death_counts.sum().values, female_covid_counts.sum().values))
    plt.bar(np.arange(len(m_cfr_by_age)), m_cfr_by_age, color='lightsteelblue', width=0.4, label='male')
    plt.bar(np.arange(len(f_cfr_by_age)) + 0.4, f_cfr_by_age, color='lightsalmon', width=0.4, label='female')
    plt.xticks(np.arange(len(m_cfr_by_age)) + 0.2, male_covid_death_counts.columns, rotation=90, fontsize=5)
    plt.ylabel('Percent')
    plt.xlabel('Age groups')
    plt.legend()
    plt.title('The percentage of Covid cases that are fatal')
    plt.savefig(pop_level_epidemiology_save_path + "percent_fatal_age_gender.png", dpi=400)
    plt.clf()
    percent_cases_male = (male_covid_counts.sum().sum() / total_cases.sum().sum()) * 100
    percent_deaths_male = (male_covid_death_counts.sum().sum() / total_deaths.sum().sum()) * 100
    plt.bar([0, 1], [percent_cases_male, percent_deaths_male], label='male', color='lightsteelblue', width=0.4)
    plt.bar([0.4, 1.4], [100 - percent_cases_male, 100 - percent_deaths_male], label='female', color='lightsalmon',
            width=0.4)
    plt.xticks([0.2, 1.2], ['% of cases', '% of deaths'])
    plt.legend()
    plt.ylabel('Percent')
    plt.title('Percentage of total Covid cases and deaths in males and females')
    plt.savefig(pop_level_epidemiology_save_path + "percent_cases_fatal_gender.png", dpi=400)
    plt.clf()

    female_inc_covid = pd.DataFrame()
    male_inc_covid = pd.DataFrame()
    overall_inc_covid = pd.DataFrame()
    for file in incidence_of_covid_files:
        data = pd.read_csv(filepath + file, delimiter='\t')
        f_data = data.loc[data['sex'] == 'f']
        m_data = data.loc[data['sex'] == 'm']
        total_data = data.drop('sex', axis=1)
        total_data = total_data.groupby('day').sum()
        female_inc_covid = female_inc_covid.append(f_data)
        male_inc_covid = male_inc_covid.append(m_data)
        overall_inc_covid = overall_inc_covid.append(total_data)
    female_inc_covid_death = pd.DataFrame()
    male_inc_covid_death = pd.DataFrame()
    for file in incidence_of_covid_death_files:
        data = pd.read_csv(filepath + file, delimiter='\t')
        f_data = data.loc[data['sex'] == 'f']
        m_data = data.loc[data['sex'] == 'm']
        total_data = data.groupby('day').sum()
        female_inc_covid_death = female_inc_covid.append(f_data)
        male_inc_covid_death = male_inc_covid.append(m_data)

    # Plot female and male covid incidence side by side
    # Drop sex column
    female_inc_covid = female_inc_covid.drop('sex', axis=1)
    # turn rest of entries into floats
    female_inc_covid = female_inc_covid.astype(float)
    # group by day and calculate average incidence per day
    female_inc_covid = female_inc_covid.groupby('day').mean()
    # Convert this into an incidence per yer
    female_inc_covid = female_inc_covid * 365
    # Drop sex column
    male_inc_covid = male_inc_covid.drop('sex', axis=1)
    # turn rest of entries into floats
    male_inc_covid = male_inc_covid.astype(float)
    # group by day and calculate average incidence per day
    male_inc_covid = male_inc_covid.groupby('day').mean()
    # Convert this into an incidence per yer
    male_inc_covid = male_inc_covid * 365
    female_colors = [[0, i / 256, 0] for i in np.linspace(75, 256, len(female_inc_covid.columns))]
    male_colors = [[0, 0, i / 256] for i in np.linspace(75, 256, len(female_inc_covid.columns))]
    fig = plt.figure(figsize=(12, 6))
    plt.subplot(1, 2, 1)
    for idx, col in enumerate(female_inc_covid.columns):
        plt.plot(female_inc_covid.index, female_inc_covid[col], label=col, color=female_colors[idx])
    plt.legend(ncol=2)
    plt.xlabel('Day')
    plt.ylabel('Incidence per 100,000 person years')
    plt.title('Females')
    plt.subplot(1, 2, 2)
    for idx, col in enumerate(male_inc_covid.columns):
        plt.plot(male_inc_covid.index, male_inc_covid[col], label=col, color=male_colors[idx])
    plt.legend(ncol=2)
    plt.xlabel('Day')
    plt.ylabel('Incidence per 100,000 person years')
    plt.title('Males')
    plt.savefig(pop_level_epidemiology_save_path + "incidence_of_covid_over_time_m_f.png", dpi=300)
    plt.clf()
    plt.close()
    # plot the mean age gender demographics of covid cases
    mean_female_inc = female_inc_covid.mean().values
    mean_male_inc = male_inc_covid.mean().values
    plt.barh(female_inc_covid.columns, mean_female_inc, color=female_colors, label='Female')
    plt.barh(male_inc_covid.columns, -mean_male_inc, color=male_colors, label='Male')
    plt.legend()
    plt.title("Mean incidence of Covid")
    plt.ylabel('Age Groups')
    plt.xlabel("Incidence per 100,000 person years")
    locs, labels = plt.xticks()
    plt.xticks(locs, np.sqrt(locs ** 2))
    plt.savefig(pop_level_epidemiology_save_path + "mean_incidence_of_covid_m_f.png", bbox_inches='tight')
    plt.clf()

    # Plot female and male covid incidence of death side by side
    female_inc_covid_death = female_inc_covid_death.drop('sex', axis=1)
    female_inc_covid_death = female_inc_covid_death.astype(float)
    female_inc_covid_death = female_inc_covid_death.groupby('day').mean()
    female_inc_covid_death *= 365
    male_inc_covid_death = male_inc_covid_death.drop('sex', axis=1)
    male_inc_covid_death = male_inc_covid_death.astype(float)
    male_inc_covid_death = male_inc_covid_death.groupby('day').mean()
    male_inc_covid_death *= 365
    female_colors_death = [[0.5, i / 256, 0] for i in np.linspace(75, 256, len(female_inc_covid_death.columns))]
    male_colors_death = [[0.5, 0, i / 256] for i in np.linspace(75, 256, len(female_inc_covid_death.columns))]
    fig = plt.figure(figsize=(12, 6))
    plt.subplot(1, 2, 1)
    for idx, col in enumerate(female_inc_covid_death.columns):
        plt.plot(female_inc_covid_death.index, female_inc_covid_death[col], label=col, color=female_colors_death[idx])
    plt.legend(ncol=2)
    plt.xlabel('Day')
    plt.ylabel('Incidence of death per 100,000 person years')
    plt.title('Females')
    plt.subplot(1, 2, 2)
    for idx, col in enumerate(male_inc_covid_death.columns):
        plt.plot(male_inc_covid_death.index, male_inc_covid_death[col], label=col, color=male_colors_death[idx])
    plt.legend(ncol=2)
    plt.xlabel('Day')
    plt.ylabel('Incidence of death per 100,000 person years')
    plt.title('Males')
    plt.savefig(pop_level_epidemiology_save_path + "incidence_of_covid_death_over_time_m_f.png", dpi=300)
    plt.clf()
    plt.close()
    # plot the mean age gender demographics of covid deaths
    mean_female_inc_death = female_inc_covid_death.mean().values
    mean_male_inc_death = male_inc_covid_death.mean().values
    plt.barh(female_inc_covid_death.columns, mean_female_inc_death, color=female_colors_death, label='Female')
    plt.barh(male_inc_covid_death.columns, -mean_male_inc_death, color=male_colors_death, label='Male')
    plt.legend()
    plt.title("Mean incidence of Covid Death")
    plt.ylabel('Age Groups')
    plt.xlabel("Incidence of death per 100,000 person years")
    locs, labels = plt.xticks()
    plt.xticks(locs, np.sqrt(locs ** 2))
    plt.savefig(pop_level_epidemiology_save_path + "mean_incidence_of_covid_death_m_f.png", bbox_inches='tight')
    plt.clf()

    # Plot the all cause mortality incidence and birth rates
    gbd_inc_death_index = ['<1 year', '1-4 years', '5-9 years', '10-14 years', '15-19 years', '20-24 years',
                           '25-29 years', '30-34 years', '35-39 years', '40-44 years', '45-49 years', '50-54 years',
                           '55-59 years', '60-64 years', '65-69 years', '70-74 years', '75-79 years', '80-84 years',
                           '85-89 years', '90-94 years', '95+ years']
    gbd_male_all_cause_inc = [4644.43491619, 345.66247033, 117.37818278, 125.07789762, 231.43518401, 341.30954466,
                              395.25473661, 537.74510804, 788.38659966, 1209.66465089, 1707.80245219, 2432.78519056,
                              3151.94542095, 4219.07377616, 5590.33612859, 7649.19420312, 10603.27600352,
                              15170.46020873, 21561.91693769, 29793.16354947, 40553.2320137]
    gbd_female_all_cause_inc = [3694.06065998, 326.36799714, 103.62990555, 98.23864342, 134.94131848, 203.38666357,
                                282.40585842, 423.67870505, 629.63514445, 896.6955772, 1140.21553189, 1472.11573858,
                                1821.19340168, 2429.90364449, 3375.09129885, 5108.04795883, 7801.83871471,
                                12048.26839677, 18038.32874434, 25255.48833104, 35470.1065766]
    gbd = pd.DataFrame(index=gbd_inc_death_index, data={'male': gbd_male_all_cause_inc,
                                                        'female':gbd_female_all_cause_inc})
    male_all_cause_inc_death = pd.DataFrame()
    female_all_cause_inc_death = pd.DataFrame()
    total_all_cause_inc_death = pd.DataFrame()
    for file in incidence_of_other_death_files:
        data = pd.read_csv(filepath + file, delimiter='\t')
        f_data = data.loc[data['sex'] == 'f']
        m_data = data.loc[data['sex'] == 'm']
        female_all_cause_inc_death = female_all_cause_inc_death.append(f_data)
        male_all_cause_inc_death = male_all_cause_inc_death.append(m_data)
        total_all_cause_inc_death = total_all_cause_inc_death.append(total_data)
    female_all_cause_inc_death = female_all_cause_inc_death.groupby('day').mean()
    male_all_cause_inc_death = male_all_cause_inc_death.groupby('day').mean()
    male_average_inc_death_per_day = list(np.divide(male_all_cause_inc_death.sum(), len(male_all_cause_inc_death)))
    female_average_inc_death_per_day = list(np.divide(female_all_cause_inc_death.sum(), len(female_all_cause_inc_death)))

    male_average_inc_death_per_year = list(np.multiply(male_average_inc_death_per_day, 365))
    female_average_inc_death_per_year = list(np.multiply(female_average_inc_death_per_day, 365))
    plt.bar(np.arange(len(gbd['female'])), gbd['female'], label='GBD', color='lightsteelblue', width=0.4)
    plt.bar(np.arange(len(gbd['female'])) + 0.4, female_average_inc_death_per_year, label='Model', color='lightsalmon',
            width=0.4)
    plt.ylabel("Incidence of death per 100,000")
    plt.xticks(np.arange(len(gbd['female'])), gbd['female'].index, rotation=90)
    plt.title('Female')
    plt.legend()
    plt.savefig(demography_save_path + "allCauseIncDeathFemales.png", bbox_inches='tight')
    plt.clf()
    plt.bar(np.arange(len(gbd['male'])), gbd['male'], label='GBD', color='lightsteelblue', width=0.4)
    plt.bar(np.arange(len(gbd['male'])) + 0.4, male_average_inc_death_per_year, label='Model', color='lightsalmon',
            width=0.4)
    plt.ylabel("Incidence of death per 100,000")
    plt.xticks(np.arange(len(gbd['male'])), gbd['male'].index, rotation=90)
    plt.title('Male')
    plt.legend()
    plt.savefig(demography_save_path + "allCauseIncDeathMales.png", bbox_inches='tight')
    plt.clf()
    # Plot the average number of cases over time
    cases = pd.DataFrame()
    for file in new_cases_files:
        data = pd.read_csv(filepath + file, delimiter='\t')
        data = data.loc[data['metric'] == 'total_cases']
        data = data.drop('metric', axis=1)
        cases = cases.append(data)
    cases = cases.groupby('day').mean()
    cases['total'] = cases.sum(axis=1)
    cases *= scale_to_full_pop
    plt.clf()
    plt.plot(cases.index, cases.total, color='lightsteelblue')
    plt.xlabel('time')
    plt.ylabel('Number of cases')
    plt.title('Average number of cases per day')
    plt.savefig(pop_level_epidemiology_save_path + "all_graphs_mean_number_of_cases.png", dpi=300)
    plt.clf()
    # Plot the number of deaths over time
    deaths = pd.DataFrame()
    for file in new_cases_files:
        data = pd.read_csv(filepath + file, delimiter='\t')
        data = data.loc[data['metric'] == 'new_deaths']
        data = data.drop('metric', axis=1)
        deaths = deaths.append(data)
    deaths = deaths.groupby('day').mean()
    deaths['total'] = deaths.sum(axis=1)
    deaths *= scale_to_full_pop
    plt.clf()
    plt.plot(cases.index, deaths.total, color='lightsalmon')
    plt.xlabel('time')
    plt.ylabel('Number of deaths')
    plt.title('Average number of deaths per day')
    plt.savefig(pop_level_epidemiology_save_path + "all_graphs_mean_number_of_deaths.png", dpi=300)
    plt.clf()
    plt.plot(cases.index, cases.total, color='lightsteelblue')
    plt.plot(cases.index, deaths.total, color='lightsalmon')
    plt.xlabel('time')
    plt.ylabel('Number (log scale)')
    plt.yscale('log')
    plt.title('Average number of cases and deaths per day')
    plt.savefig(pop_level_epidemiology_save_path + "all_graphs_cases_deaths.png", dpi=300)
    plt.clf()
    total_deaths_in_sim = deaths.total.sum()
    total_cases_in_sim = cases.total.sum()
    cfr = total_deaths_in_sim / total_cases_in_sim
    plt.pie([cfr, 1 - cfr], explode=[0.2, 0],
            labels=[f"fatal {np.round(cfr * 100, 4)}%", f"non-fatal {np.round((1 - cfr) * 100, 4)}%"],
            colors=['r', 'lightsalmon'],
            startangle=0)
    plt.title("% of cases that are fatal")
    plt.savefig(pop_level_epidemiology_save_path + "percent_fatal.png", dpi=400)
    # plot the percentage of districts that are infected over time
    perc = pd.DataFrame()
    for file in percent_with_covid_files:
        data = pd.read_csv(filepath + file, delimiter='\t')
        data = data.drop('Unnamed: 61', axis=1)
        perc = perc.append(data)
    perc = perc.groupby('day').mean()

    for idx in cases.index:
        fig = plt.figure(figsize=(8, 8))

        ax1 = plt.subplot(1, 1, 1)
        spatialDf = country
        spatialDf['perc_with_covid'] = perc.iloc[idx].values
        spatialDf.plot(ax=ax1, column='perc_with_covid', cmap='Purples', edgecolor='k', legend=True,
                       vmax=1)
        plt.title("% with covid from time \n" + str(idx) + " to " + str(idx + 1))
        plt.savefig(gif_path + f"perc_inf/day_{idx}.png", dpi=300)
        plt.clf()
        ax2 = plt.subplot(1, 1, 1)
        spatialDf['n_cases'] = cases.iloc[idx].values[: -1]
        spatialDf.plot(ax=ax2, column='n_cases', cmap='Oranges', edgecolor='k', legend=True,
                       vmax=max(cases.max().values[:-1]))
        plt.title("N new covid cases from time \n" + str(idx) + " to " + str(idx + 1))
        plt.savefig(gif_path + f"n_cases/day_{idx}.png", dpi=300)
        plt.clf()
        plt.close()
        fig = plt.figure(figsize=(12, 8))
        ax3 = plt.subplot(1, 2, 1)
        spatialDf.plot(ax=ax3, column='n_cases', cmap='Purples', edgecolor='k', legend=True,
                       vmax=max(cases.max().values[:-1]))
        plt.title("N new covid cases from time \n" + str(idx) + " to " + str(idx + 1))
        ax4 = plt.subplot(1, 2, 2)
        spatialDf.plot(ax=ax4, column='perc_with_covid', cmap='Oranges', edgecolor='k', legend=True,
                       vmax=1)
        plt.title("% with covid from time \n" + str(idx) + " to " + str(idx + 1))
        plt.savefig(gif_path + f"n_perc_comp/day_{idx}.png", dpi=300)
        plt.clf()
        plt.close()
    # turn percent infected graphs into a gif
    graph_path = gif_path + "perc_inf/"
    files = os.listdir(graph_path)
    files.sort(key=lambda f: int(re.sub('\D', '', f)))
    images = []

    for file in files:
        im = Image.open(graph_path + file)
        draw = ImageDraw.Draw(im)
        images.append(im)

    images[0].save(spatial_epidemiology_save_path + "perc_inf.gif",
                   save_all=True, append_images=images[1:], optimize=False, duration=40, loop=0)
    # turn n new infected graphs into a gif
    graph_path = gif_path + "n_cases/"
    files = os.listdir(graph_path)
    files.sort(key=lambda f: int(re.sub('\D', '', f)))
    images = []

    for file in files:
        im = Image.open(graph_path + file)
        draw = ImageDraw.Draw(im)
        images.append(im)

    images[0].save(spatial_epidemiology_save_path + "n_cases.gif",
                   save_all=True, append_images=images[1:], optimize=False, duration=40, loop=0)
    # Compare the number of cases to the percent infected
    graph_path = gif_path + "n_perc_comp/"
    files = os.listdir(graph_path)
    files.sort(key=lambda f: int(re.sub('\D', '', f)))
    images = []

    for file in files:
        im = Image.open(graph_path + file)
        draw = ImageDraw.Draw(im)
        images.append(im)

    images[0].save(spatial_epidemiology_save_path + "n_perc_comp.gif",
                   save_all=True, append_images=images[1:], optimize=False, duration=40, loop=0)
    asympt = pd.DataFrame()
    for file in new_cases_files:
        data = pd.read_csv(filepath + file, delimiter='\t')
        data = data.loc[data['metric'] == 'total_asympt_cases']
        data = data.drop('metric', axis=1)
        asympt = asympt.append(data)
    asympt = asympt.groupby('day').mean()
    asympt['total'] = asympt.sum(axis=1)
    mild = pd.DataFrame()
    for file in new_cases_files:
        data = pd.read_csv(filepath + file, delimiter='\t')
        data = data.loc[data['metric'] == 'total_mild_cases']
        data = data.drop('metric', axis=1)
        mild = mild.append(data)
    mild = mild.groupby('day').mean()
    mild['total'] = mild.sum(axis=1)
    severe = pd.DataFrame()
    for file in new_cases_files:
        data = pd.read_csv(filepath + file, delimiter='\t')
        data = data.loc[data['metric'] == 'total_severe_cases']
        data = data.drop('metric', axis=1)
        severe = severe.append(data)
    severe = severe.groupby('day').mean()
    severe['total'] = severe.sum(axis=1)
    critical = pd.DataFrame()
    for file in new_cases_files:
        data = pd.read_csv(filepath + file, delimiter='\t')
        data = data.loc[data['metric'] == 'total_critical_cases']
        data = data.drop('metric', axis=1)
        critical = critical.append(data)
    critical = critical.groupby('day').mean()
    critical['total'] = critical.sum(axis=1)
    # create a gif of the total number of cases in each category over time

    fig = plt.figure(figsize=(12, 12))
    for idx in cases.index:
        ax1 = plt.subplot(2, 2, 1)

        spatialDf = country
        spatialDf['asympt_cases'] = asympt.iloc[idx].values[:-1]
        spatialDf.plot(ax=ax1, column='asympt_cases', cmap='Purples', edgecolor='k', legend=True,
                       vmax=max(asympt.max().values[:-1]))
        plt.title("N asympt. cases per district from time \n" + str(idx) + " to " + str(idx + 1))
        ax2 = plt.subplot(2, 2, 2)

        spatialDf['mild_cases'] = mild.iloc[idx].values[:-1]
        spatialDf.plot(ax=ax2, column='mild_cases', cmap='Blues', edgecolor='k', legend=True,
                       vmax=max(mild.max().values[:-1]))
        plt.title("N mild cases per district from time \n" + str(idx) + " to " + str(idx + 1))
        ax3 = plt.subplot(2, 2, 3)

        spatialDf['severe_cases'] = severe.iloc[idx].values[:-1]
        spatialDf.plot(ax=ax3, column='severe_cases', cmap='Greens', edgecolor='k', legend=True,
                       vmax=max(severe.max().values[:-1]))
        plt.title("N severe cases per district from time \n" + str(idx) + " to " + str(idx + 1))
        ax4 = plt.subplot(2, 2, 4)

        spatialDf['critical_cases'] = critical.iloc[idx].values[:-1]
        spatialDf.plot(ax=ax4, column='critical_cases', cmap='Oranges', edgecolor='k', legend=True,
                       vmax=max(critical.max().values[:-1]))
        plt.title("N critical cases per district from time \n" + str(idx) + " to " + str(idx + 1))

        plt.savefig(gif_path + "cases_by_type_over_time/" + f"day_{idx}.png", dpi=300)
        plt.clf()
    graph_path = gif_path + "cases_by_type_over_time/"
    files = os.listdir(graph_path)
    files.sort(key=lambda f: int(re.sub('\D', '', f)))
    images = []

    for file in files:
        im = Image.open(graph_path + file)
        draw = ImageDraw.Draw(im)
        images.append(im)

    images[0].save(spatial_epidemiology_save_path + "cases_by_type_over_time.gif",
                    save_all=True, append_images=images[1:], optimize=False, duration=40, loop=0)


plot_all_graphs(file_path, base_path, zimbabwe, "params_robbie_test_bulkTest_0.03_100")
